{"version":3,"sources":["components/Display/Display.module.css","components/Geocode/Geocode.module.css","App.module.css","assets/location_icon.svg","components/Display/Display.js","components/Geocode/Geocode.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","LocationIcon","L","icon","iconUrl","require","iconRetinaUrl","iconSize","iconAnchor","className","display","props","roundToTwo","num","Math","round","calculate","dist","acos","sin","responseObj","lat","cos","lon","licence","classes","ResultBox","DistanceBox","MapBox","undefined","Map","center","Number","zoom","distance","getZoom","TileLayer","url","attribution","Marker","position","Popup","PopupTitle","display_name","PopupDesc","positions","Geocode","useState","setResponseObj","responseObj2","setResponseObj2","city","setCity","city2","setCity2","uriEncodedCity","encodeURIComponent","uriEncodedCity2","e","a","preventDefault","Promise","all","fetch","then","response","json","c1","c2","console","log","message","Container","Form","onSubmit","Title","type","placeholder","maxLength","value","onChange","target","TextInput","Button","Display","App","Header","Main","Footer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.2946c488.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ResultBox\":\"Display_ResultBox__1iFv1\",\"MapBox\":\"Display_MapBox__1UnLL\",\"DistanceBox\":\"Display_DistanceBox__2q7nd\",\"PopupTitle\":\"Display_PopupTitle__D0m2I\",\"PopupDesc\":\"Display_PopupDesc__2FOC8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"Geocode_Container__1DPIe\",\"Form\":\"Geocode_Form__Wi9Zw\",\"Title\":\"Geocode_Title__3CHwQ\",\"Button\":\"Geocode_Button__32cu_\",\"TextInput\":\"Geocode_TextInput__20ofc\",\"Radio\":\"Geocode_Radio__A3INC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Header\":\"App_Header__ZS1m2\",\"Main\":\"App_Main__HQkvd\",\"Footer\":\"App_Footer__XLEFd\"};","module.exports = __webpack_public_path__ + \"static/media/location_icon.2ceaf661.svg\";","import React from 'react';\nimport classes from './Display.module.css';\nimport {Map, Marker, Popup, TileLayer} from \"react-leaflet\";\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport {GeodesicLine} from 'react-leaflet-geodesic';\n\nexport const LocationIcon = L.icon({\n  iconUrl: require('../../assets/location_icon.svg'),\n  iconRetinaUrl: require('../../assets/location_icon.svg'),\n  iconSize: [35, 35],\n  iconAnchor: [10, 27],\n  className: 'leaflet-location-icon'\n});\n\nconst display = (props) => {\n    function roundToTwo(num) {    \n        return +(Math.round(num + \"e+2\")  + \"e-2\");\n    }\n\n    function calculate() {\n        let dist = 3963.0 * Math.acos(Math.sin(props.responseObj[0].lat/57.29577951) * Math.sin(props.responseObj[1].lat/57.29577951) + Math.cos(props.responseObj[0].lat/57.29577951) * Math.cos(props.responseObj[1].lat/57.29577951) * Math.cos((props.responseObj[1].lon/57.29577951) - (props.responseObj[0].lon/57.29577951)))\n        let distKm = dist * 1.609344\n        return [roundToTwo(distKm), roundToTwo(dist)]\n    }\n\n    function getCenter() {\n        return {lat: (Number(props.responseObj[0].lat) + Number(props.responseObj[1].lat)) / 2, lon: (Number(props.responseObj[0].lon) + Number(props.responseObj[1].lon)) / 2}\n    }\n\n    function getZoom() {\n        let distance = calculate()[0];\n        if (distance < 250)\n            return 8;\n        else if (distance > 250 && distance < 500)\n            return 7;\n        else if (distance > 500 && distance < 1000)\n            return 6;\n        else if (distance > 1000 && distance < 3000)\n            return 5;\n        else if (distance > 3000 && distance < 5000)\n            return 4;\n        else if (distance > 5000 && distance < 7000)\n            return 3;\n        else\n            return 2;\n    }\n\n    return (\n        <div>\n            {props.responseObj[0].licence === \"Data Â© OpenStreetMap contributors, ODbL 1.0. https://osm.org/copyright\" ?\n                <div className = {classes.ResultBox}>\n                    <div className = {classes.DistanceBox}>\n                        <p>Distance between cities: {calculate()[0]} [km] | {calculate()[1]} [mi]</p>\n                    </div>\n                    <div className = {classes.MapBox}>\n                        {props.responseObj[1].lat !== undefined ?\n                            <Map center = {getCenter()} zoom = {getZoom()}>\n                                <TileLayer\n                                    url = \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                                    attribution = \"&copy; <a href=&quot;http://osm.org/copyright&quot;>OpenStreetMap</a> contributors\"\n                                />\n                                <Marker position = {[props.responseObj[0].lat, props.responseObj[0].lon]} icon = {LocationIcon}>\n                                    <Popup>\n                                        <p className = {classes.PopupTitle}>{props.responseObj[0].display_name}</p>\n                                        <p className = {classes.PopupDesc}>Lat: {roundToTwo(props.responseObj[0].lat)} Lon: {roundToTwo(props.responseObj[0].lon)}</p>\n                                    </Popup>\n                                </Marker>\n                                <Marker position = {[props.responseObj[1].lat, props.responseObj[1].lon]} icon = {LocationIcon}>\n                                    <Popup>\n                                        <p className = {classes.PopupTitle}>{props.responseObj[1].display_name}</p>\n                                        <p className = {classes.PopupDesc}>Lat: {roundToTwo(props.responseObj[1].lat)} Lon: {roundToTwo(props.responseObj[1].lon)}</p>\n                                    </Popup>\n                                </Marker>\n                                <GeodesicLine\n                                    positions = {[[Number(props.responseObj[0].lat), Number(props.responseObj[0].lon)],[Number(props.responseObj[1].lat), Number(props.responseObj[1].lon)]]}\n                                />\n                            </Map>\n                        : null\n                        }\n                    </div>\n                </div>\n            : null\n            }\n        </div>\n    )\n}\n\nexport default display;","import React, {useState} from 'react';\nimport Display from '../Display/Display';\nimport classes from './Geocode.module.css';\n\nconst Geocode = () => {\n    let [responseObj, setResponseObj] = useState({});\n    let [responseObj2, setResponseObj2] = useState({});\n    let [city, setCity] = useState('');\n    let [city2, setCity2] = useState('');\n\n    const uriEncodedCity = encodeURIComponent(city);\n    const uriEncodedCity2 = encodeURIComponent(city2);\n\n    async function getCity(e) {\n        e.preventDefault();\n\n        setResponseObj({});\n        setResponseObj2({});\n\n        try {\n            let [c1, c2] = await Promise.all([\n                fetch(`https://nominatim.openstreetmap.org/search?city=${uriEncodedCity}&format=json&limit=1`).then(response => response.json()),\n                fetch(`https://nominatim.openstreetmap.org/search?city=${uriEncodedCity2}&format=json&limit=1`).then(response => response.json())  \n            ])\n            setResponseObj(c1[0])\n            setResponseObj2(c2[0])\n        }\n        catch (err) {\n            console.log(err.message);\n        }\n    }\n\n    return (\n        <div className = {classes.Container}>\n            <form className = {classes.Form} onSubmit = {getCity}>\n                <label className = {classes.Title}>\n                    Enter first city\n                    <input\n                        type = \"text\"\n                        placeholder = \"E.g. London\"\n                        maxLength = \"50\"\n                        value = {city}\n                        onChange = {(e) => setCity(e.target.value)}\n                        className = {classes.TextInput}\n                    />\n                </label>\n                <label className = {classes.Title}>\n                    Enter second city\n                    <input\n                        type = \"text\"\n                        placeholder = \"E.g. Berlin\"\n                        maxLength = \"50\"\n                        value = {city2}\n                        onChange = {(e) => setCity2(e.target.value)}\n                        className = {classes.TextInput}\n                    />\n                </label>\n                <button type = 'submit' className = {classes.Button}>Calculate distance between</button>\n            </form>\n            <Display\n                responseObj = {[responseObj, responseObj2]}\n            />\n        </div>\n    )\n}\n\nexport default Geocode;","import React from 'react';\nimport Geocode from './components/Geocode/Geocode';\nimport './App.css';\nimport classes from './App.module.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className = {classes.Header}>\n        Distance between cities\n      </header>\n      <main className = {classes.Main}>\n        <Geocode />\n      </main>\n      <footer className = {classes.Footer}>\n        Created by jacksonafide.\n      </footer>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}